(cl:in-package #:cl-data-structures.utils.metric)


(-> lcs-metric (vector vector &optional (or symbol function))
    single-float)
(defun lcs-metric (a b &optional (test #'equal))
  (declare (optimize (speed 3) (safety 1) (space 0) (debug 0)))
  (bind ((a-length (length a))
         (b-length (length b))
         (max-length (max a-length b-length))
         (test (ensure-function test))
         (matrix (make-array `(,(1+ a-length) ,(1+ b-length))
                             :element-type 'fixnum)))
    (when (zerop max-length)
      (return-from lcs-metric 0.0))
    (cl-ds.utils:cases ((:variant (eq test #'eq)
                                  (eq test #'eql)
                                  (eq test #'equal)))

      (when (and (= a-length b-length) (every test a b))
        (return-from lcs-metric 0.0))
      (iterate
        (declare (type fixnum i))
        (for i from 1 to a-length)
        (for ea = (aref a (1- i)))
        (iterate
          (declare (type fixnum j))
          (for j from 1 to b-length)
          (for eb = (aref b (1- j)))
          (if (funcall test ea eb)
              (setf (aref matrix i j) (1+ (aref matrix (1- i) (1- j))))
              (setf (aref matrix i j) (max (aref matrix i (1- j))
                                           (aref matrix (1- i) j)))))))
    (- 1.0 (/ (aref matrix a-length b-length)
              max-length))))
